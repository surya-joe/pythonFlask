1, create a basic flask template
    
    weatherApp |--- static/css/style.css 
               |--- templates/base.html
               |              index.html
               |--- app.py
    base.html:
    ----------
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta http-equiv="X-UA-Compatible" content="IE=edge">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Flask Weather App</title>
        </head>
        <body>
            {% block body %}
            {% endblock %}
        </body>
        </html>

    index.html:
    -----------
        {% extends 'base.html' %}

        {% block body %}
            <div class="container">
                <h1>Live Weather Forecast</h1>
                <form action="">
                    <input type="text" placeholder="Enter city name" name="cityName">
                    <input type="submit" value="Search">
                </form>
            </div>
        {% endblock %}

    app.py:
    -------
        from flask import Flask, render_template

        app = Flask(__name__) 

        @app.route('/')
        def index():
            return render_template('index.html')

        if __name__ == ('__main__'):
            app.run(debug=True)

2, Create a Submit route.
    app.py:
    -------
    @app.route('/weather_report', methods=['GET','POST'])
    def predictWeather():
        if request.method == 'POST':
            try:
                return 'get response'
            except:
                return 'print error'

    index.html:
    -----------
----->  <form action="/weather_report">
            <input type="text" placeholder="Enter city name" name="cityName">
            <input type="submit" value="Search">
        </form>

3, Get weather API:
    * sign-up in rapidapi.com 
    * go to weather/weatherapi.com
    * to get live weather update:
        -> select Realtime weather Api 
        -> pass the parameter(nameOfCity) in 'q' field:
        -> then test-endpoint
        -> you can get the api result & code snippet is availabel.

    * From code sinppets, create your 
        API_KEY,
        API_HOST,
        API_URL    in app.py

    app.py:
    -------
        from crypt import methods
        from flask import Flask, render_template, request, requests

        from weatherAppSource.app import API_URL

        app = Flask(__name__) 

---->   API_KEY = "e3dc3da840msh029ff60fb38eb47p147d3cjsncb1ccd2d319a"
---->   API_HOST = "weatherapi-com.p.rapidapi.com"
---->   API_URL = "https://weatherapi-com.p.rapidapi.com/current.json"

        @app.route('/')
        def index():
            return render_template('index.html')

        @app.route('/weather_report', methods=['GET','POST'])
        def predictWeather():
            if request.method == 'POST':
                try:
                    return 'get response'
                except:
                    return 'print error'

            app.run(debug=True)

4, Refer the code sinppets in weatherApi and write a code:
    app.py:
    -------
         @app.route('/weather_report', methods=['GET','POST'])`
    `    def predictWeather():
            if request.method == 'POST':
                userInput = request.form['cityName']
                url = API_URL
                query = { 'q':userInput }
                headers = {
                    "X-RapidAPI-Key" : API_KEY,
                    "X-RapidAPI-Host" : API_HOST
                }
                try:
                    response = requests.request("GET", url, headers=headers, params=query)
                    jsonData = json.loads(response.text)

                    name = jsonData['location']['name']

                    return render_template('index.html',
                        name = name
                    )
                except:
                    return  render_template('index.html', error='Please enter a valid name.')`  `

    index.html:
    -----------
        <div class="container">

            <h1>Live Weather Forecast <img id="cloudImg" src="{{ condition_icon }}"></img></h1>

            <form action="/weather_report" method="POST">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Enter city name" name="cityName">
                    <input class="btn btn-outline-secondary btn-primary" type="submit" value="Search" id="searchBtn">
                </div>              
            </form>

            {% if name %}
                <h2>Render Api data</h2>
            {% endif %}

            {% if error %}
                    <div class="row">
                        <h2>{{ error }}</h2>
                    </div>
            {% endif %}
        </div>


5, Get all the data you needed for your weather app:
    app.py:
    -------
            @app.route('/weather_report', methods=['GET','POST'])
            def predictWeather():
                if request.method == 'POST':
                    userInput = request.form['cityName']
                    url = API_URL
                    query = { 'q':userInput }
                    headers = {
                        "X-RapidAPI-Key" : API_KEY,
                        "X-RapidAPI-Host" : API_HOST
                    }
                    # print(userInput)
                    try:
                        response = requests.request("GET", url, headers=headers, params=query)
                        jsonData = json.loads(response.text)

                        name = jsonData['location']['name']
                        temp_c = jsonData['current']['temp_c']
                        temp_f = jsonData['current']['temp_f']
                        last_update = jsonData['current']['last_updated']
                        timeZone = jsonData['location']['tz_id']
                        localTime = jsonData['location']['localtime']
                        condition_text = jsonData['current']['condition']['text']
                        condition_icon = jsonData['current']['condition']['icon']
                        windKph = jsonData['current']['wind_kph']

                        return render_template('index.html',
                            name = name,
                            temp_c = temp_c,
                            temp_f = temp_f,
                            last_update = last_update,
                            localTime = localTime,
                            timeZone = timeZone,
                            condition_text = condition_text,
                            condition_icon = condition_icon,
                            windKph = windKph
                        )
                    except:
                        return  render_template('index.html', error='Please enter a valid name.')

    index.html:
    -----------
        <div class="container">

        <h1>Live Weather Forecast <img id="cloudImg" src="{{ condition_icon }}"></img></h1>

        <form action="/weather_report" method="POST">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Enter city name" name="cityName">
                <input class="btn btn-outline-secondary btn-primary" type="submit" value="Search" id="searchBtn">
            </div>              
        </form>

       {% if name %}
            <div class="row">
                <p>Current Temperature in <b>{{ name }}</b> </p>
            </div>
            <div class="row">
                <p>{{ temp_c }}°C / {{ temp_f }} °F</p>
            </div>
            <div class="row">
                <p> <b>Last Update</b> <br> {{ last_update }} </p>
            </div>
            <div class="row">
                <div class="col">
                    <p> <b>Time Zone</b> <br> {{ timeZone }}</p>
                </div>
                <div class="col">
                    <p><b>Local Time</b> <br> {{ localTime }}</p>
                </div>
                <div class="col">
                    <p><b>Condition</b> <br> {{ condition_text }}</p>
                </div>
                <div class="col">
                    <p><b>Wind Speed</b> <br> {{ windKph }} KPM</p>
                </div>
            </div>
       {% endif %}

       {% if error %}
            <div class="row">
                <h2>{{ error }}</h2>
            </div>
       {% endif %}
    </div>

6, Deploy the app in Heroku:

    * pip3 install gunicorn
    
    * touch Procfile 
        write to the Procfile:
            web: gunicorn app:app
    
    * Create requirements.txt 
        pip3 freeze > requirements.txt 
    
    * heroku login 
    * git init 
    * git add . 
    * git commit -m 'initapp'
    * heroku create flask-app-weather-app 
    * git push heroku master 

    link : https://flask-app-weather-app.herokuapp.com/

7, Push the app into GitHub 
    *